from disassembler.disassembler import Disassembler

functions = [
    {
        'name': 'decode_and_print_string',
        'base_addr': 0x41a508,
        'bytecode': bytes.fromhex('1d0103181a0103180103143508001a02031400000000000003000000001a02031400000400000003000000001d0103201d01031c1d0103100e0103040103041a01030803ffff00001a0103200203180000f8ffffff3e010a01030803ffff0000030103080e01030c01030c1a01031c0103180a01031c03040000001a0103200203180000f8ffffff0e0103100103101001031003040000002503eaffffff1a01010402011c100100000000010103100e0201200c0100000000010104090201200c0100000000037c0000000101030c1001030c0103082603b3ffffff1d0103203203000000003404001e0103101e01031c1e0103200e0103040103043408001e010318330000'),
        'parameters': [
            {
                'addr': 0x41a521,
                'name': 'encoded_string_ptr'
            },
            {
                'addr': 0x41a530,
                'name': 'string_decoding_key'
            },
            {
                'addr': 0x41a5ea,
                'name': 'puts'
            }
        ]
    },
    {
        'name': 'exit',
        'base_addr': 0x41a38c,
        'bytecode': bytes.fromhex('1d0103181a0103180103141d03010000003203000000003404000e0103040103041a0103140103181e010318330000'),
        'parameters': [
            {
                'addr': 0x41a39f,
                'name': 'exit'
            }
        ]
    },
    {
        'name': 'check_debugger_and_validate_input',
        'base_addr': 0x41a000,
        'bytecode': bytes.fromhex('31030a0000000e0103040103043300001b01030803300000001a010304020108000002000000110103040103042603d3ffffff1a0103040203080000680000000f01030403700000001001030403700000002503aeffffff1a01030c0203080000180000001a01030402030c000040000000110103040302000000250385ffffff1a01030402030c0000440000001101030401030426036bffffff1c01030803600000001a01030402010800000200000011010304010304260348ffffff1a0103040203080000bc0000000f0103040370000000100103040370000000250323ffffff1a01030c0203080000300000001a01030402030c0000700000001101030403020000002503fafeffff1a01030402030c000074000000110103040103042603e0feffff1d01031c1d0103201d03000000001a0103040103141d036d66756f1d032e39203d1d03203d6f291d03233c6f3f1d03213b262e1d033d2a2b2a1d032a676d0c1d033c232e3b1d031b3d2e211d03001275751d032e2161061d0314073a221a0103080103040a0103080103140e0201140801ffffffff034f000000020103082603e7ffffff1a0103040103141d03000000001d010304320300000000343c003500011a0103040103141d03000000001d03000100001d010304320300000000340c000e0103040103041a01030803ffff00001a0103200103143e010a01030803ffff000003010308020103081a02011408010000000003000000001a01030c0103081a01031c0103141a010320030000000037011a01030801030c3103170000001a01030403010000003400011e0103201e01031c3300001001030c033b0000002603daffffff1a010304020114080100000000010201140801ffffffff160201140801ffffffff039f0000000a0201140801ffffffff030e000000030201140801ffffffff0e0201140801ffffffff03c3000000040201140801ffffffff090201140801ffffffff033e000000170201140801ffffffff031d000000020201140801ffffffff0e0201140801ffffffff01010402010308260369ffffff1a0103200103141d03f5ed17001d03f5edf5ed1d03fed6d5a51d03fed6fed61d036691c1c21d036e06325a1d032d69296d1d0336726a2e1d03653509351d037b53708a1d03dcacf80f1d03a85b67901d031fa0a8f31d03a78fc3881d038c9cebbf1a01031c0103141a01030801030c3901343c002603c9feffff1a01030403020000003103c3feffff'),
        'parameters': [
            {
                'addr': 0x41a1b3,
                'name': 'stdout'
            },
            {
                'addr': 0x41a1bd,
                'name': 'fputs'
            },
            {
                'addr': 0x41a1e0,
                'name': 'fgets'
            },
            {
                'addr': 0x41a233,
                'name': 'credential_dest_ptr'
            }
        ]
    },
    {
        'name': 'decrypt_flag',
        'base_addr': 0x41a3c0,
        'bytecode': bytes.fromhex('1d0103181a010318010314350c001a02031400000000000003000000001a02031400000400000003000000001a02031400000800000003000000001d0103201d01031c1d0103100e0103040103041a01030803ffff00001a0103200203180000f4ffffff3e010a01030803ffff0000030103081a0103100103083510001a01031c0103141d01031c1d0103101d0203180000f4ffffff320300000000340c003520001a0103200103141d0103201d0103101d0203180000f4ffffff320300000000340c001d01031c1d0103201d0203180000fcffffff1d0203180000f8ffffff3203000000003440001d0203180000fcffffff1d0203180000f8ffffff3203000000003408001a0103100103040e0103040103041001031003f6c9a24d2603090000001a01030403010000001e0103101e01031c1e010320340c001e010318330000'),
        'parameters': [
            {
                'addr': 0x41a3d9,
                'name': 'credential_dest_ptr_2'
            },
            {
                'addr': 0x41a3e8,
                'name': 'encrypted_string_ptr'
            },
            {
                'addr': 0x41a3f7,
                'name': 'constant_0x570'
            },
            {
                'addr': 0x41a458,
                'name': 'md5_func'
            },
            {
                'addr': 0x41a47d,
                'name': 'sha256_func'
            },
            {
                'addr': 0x41a4a2,
                'name': 'some_decryption_func'
            },
            {
                'addr': 0x41a4bf,
                'name': 'crc_func'
            }
        ]
    }
]

if __name__ == '__main__':             
    for function in functions:
        dis = Disassembler(function['bytecode'], function['base_addr'], function['parameters'])
        dis.disassemble()
        disassembly = dis.get_disassembly()
        open(f'output/{function["name"]}.asm', 'w').write(disassembly)